// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: nova/v1/query.proto

package novav1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Query_Config_FullMethodName               = "/nova.v1.Query/Config"
	Query_PendingEpoch_FullMethodName         = "/nova.v1.Query/PendingEpoch"
	Query_FinalizedEpochs_FullMethodName      = "/nova.v1.Query/FinalizedEpochs"
	Query_LatestFinalizedEpoch_FullMethodName = "/nova.v1.Query/LatestFinalizedEpoch"
	Query_FinalizedEpoch_FullMethodName       = "/nova.v1.Query/FinalizedEpoch"
	Query_StateRoots_FullMethodName           = "/nova.v1.Query/StateRoots"
	Query_LatestStateRoot_FullMethodName      = "/nova.v1.Query/LatestStateRoot"
	Query_StateRoot_FullMethodName            = "/nova.v1.Query/StateRoot"
	Query_MailboxRoots_FullMethodName         = "/nova.v1.Query/MailboxRoots"
	Query_LatestMailboxRoot_FullMethodName    = "/nova.v1.Query/LatestMailboxRoot"
	Query_MailboxRoot_FullMethodName          = "/nova.v1.Query/MailboxRoot"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	Config(ctx context.Context, in *QueryConfig, opts ...grpc.CallOption) (*QueryConfigResponse, error)
	PendingEpoch(ctx context.Context, in *QueryPendingEpoch, opts ...grpc.CallOption) (*QueryEpochResponse, error)
	FinalizedEpochs(ctx context.Context, in *QueryFinalizedEpochs, opts ...grpc.CallOption) (*QueryFinalizedEpochsResponse, error)
	LatestFinalizedEpoch(ctx context.Context, in *QueryLatestFinalizedEpoch, opts ...grpc.CallOption) (*QueryEpochResponse, error)
	FinalizedEpoch(ctx context.Context, in *QueryFinalizedEpoch, opts ...grpc.CallOption) (*QueryEpochResponse, error)
	StateRoots(ctx context.Context, in *QueryStateRoots, opts ...grpc.CallOption) (*QueryStateRootsResponse, error)
	LatestStateRoot(ctx context.Context, in *QueryLatestStateRoot, opts ...grpc.CallOption) (*QueryStateRootResponse, error)
	StateRoot(ctx context.Context, in *QueryStateRoot, opts ...grpc.CallOption) (*QueryStateRootResponse, error)
	MailboxRoots(ctx context.Context, in *QueryMailboxRoots, opts ...grpc.CallOption) (*QueryMailboxRootsResponse, error)
	LatestMailboxRoot(ctx context.Context, in *QueryLatestMailboxRoot, opts ...grpc.CallOption) (*QueryMailboxRootResponse, error)
	MailboxRoot(ctx context.Context, in *QueryMailboxRoot, opts ...grpc.CallOption) (*QueryMailboxRootResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Config(ctx context.Context, in *QueryConfig, opts ...grpc.CallOption) (*QueryConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryConfigResponse)
	err := c.cc.Invoke(ctx, Query_Config_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingEpoch(ctx context.Context, in *QueryPendingEpoch, opts ...grpc.CallOption) (*QueryEpochResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryEpochResponse)
	err := c.cc.Invoke(ctx, Query_PendingEpoch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FinalizedEpochs(ctx context.Context, in *QueryFinalizedEpochs, opts ...grpc.CallOption) (*QueryFinalizedEpochsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryFinalizedEpochsResponse)
	err := c.cc.Invoke(ctx, Query_FinalizedEpochs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestFinalizedEpoch(ctx context.Context, in *QueryLatestFinalizedEpoch, opts ...grpc.CallOption) (*QueryEpochResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryEpochResponse)
	err := c.cc.Invoke(ctx, Query_LatestFinalizedEpoch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FinalizedEpoch(ctx context.Context, in *QueryFinalizedEpoch, opts ...grpc.CallOption) (*QueryEpochResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryEpochResponse)
	err := c.cc.Invoke(ctx, Query_FinalizedEpoch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StateRoots(ctx context.Context, in *QueryStateRoots, opts ...grpc.CallOption) (*QueryStateRootsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryStateRootsResponse)
	err := c.cc.Invoke(ctx, Query_StateRoots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestStateRoot(ctx context.Context, in *QueryLatestStateRoot, opts ...grpc.CallOption) (*QueryStateRootResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryStateRootResponse)
	err := c.cc.Invoke(ctx, Query_LatestStateRoot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StateRoot(ctx context.Context, in *QueryStateRoot, opts ...grpc.CallOption) (*QueryStateRootResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryStateRootResponse)
	err := c.cc.Invoke(ctx, Query_StateRoot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MailboxRoots(ctx context.Context, in *QueryMailboxRoots, opts ...grpc.CallOption) (*QueryMailboxRootsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryMailboxRootsResponse)
	err := c.cc.Invoke(ctx, Query_MailboxRoots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestMailboxRoot(ctx context.Context, in *QueryLatestMailboxRoot, opts ...grpc.CallOption) (*QueryMailboxRootResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryMailboxRootResponse)
	err := c.cc.Invoke(ctx, Query_LatestMailboxRoot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MailboxRoot(ctx context.Context, in *QueryMailboxRoot, opts ...grpc.CallOption) (*QueryMailboxRootResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryMailboxRootResponse)
	err := c.cc.Invoke(ctx, Query_MailboxRoot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility.
type QueryServer interface {
	Config(context.Context, *QueryConfig) (*QueryConfigResponse, error)
	PendingEpoch(context.Context, *QueryPendingEpoch) (*QueryEpochResponse, error)
	FinalizedEpochs(context.Context, *QueryFinalizedEpochs) (*QueryFinalizedEpochsResponse, error)
	LatestFinalizedEpoch(context.Context, *QueryLatestFinalizedEpoch) (*QueryEpochResponse, error)
	FinalizedEpoch(context.Context, *QueryFinalizedEpoch) (*QueryEpochResponse, error)
	StateRoots(context.Context, *QueryStateRoots) (*QueryStateRootsResponse, error)
	LatestStateRoot(context.Context, *QueryLatestStateRoot) (*QueryStateRootResponse, error)
	StateRoot(context.Context, *QueryStateRoot) (*QueryStateRootResponse, error)
	MailboxRoots(context.Context, *QueryMailboxRoots) (*QueryMailboxRootsResponse, error)
	LatestMailboxRoot(context.Context, *QueryLatestMailboxRoot) (*QueryMailboxRootResponse, error)
	MailboxRoot(context.Context, *QueryMailboxRoot) (*QueryMailboxRootResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueryServer struct{}

func (UnimplementedQueryServer) Config(context.Context, *QueryConfig) (*QueryConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Config not implemented")
}
func (UnimplementedQueryServer) PendingEpoch(context.Context, *QueryPendingEpoch) (*QueryEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingEpoch not implemented")
}
func (UnimplementedQueryServer) FinalizedEpochs(context.Context, *QueryFinalizedEpochs) (*QueryFinalizedEpochsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizedEpochs not implemented")
}
func (UnimplementedQueryServer) LatestFinalizedEpoch(context.Context, *QueryLatestFinalizedEpoch) (*QueryEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestFinalizedEpoch not implemented")
}
func (UnimplementedQueryServer) FinalizedEpoch(context.Context, *QueryFinalizedEpoch) (*QueryEpochResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizedEpoch not implemented")
}
func (UnimplementedQueryServer) StateRoots(context.Context, *QueryStateRoots) (*QueryStateRootsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateRoots not implemented")
}
func (UnimplementedQueryServer) LatestStateRoot(context.Context, *QueryLatestStateRoot) (*QueryStateRootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestStateRoot not implemented")
}
func (UnimplementedQueryServer) StateRoot(context.Context, *QueryStateRoot) (*QueryStateRootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StateRoot not implemented")
}
func (UnimplementedQueryServer) MailboxRoots(context.Context, *QueryMailboxRoots) (*QueryMailboxRootsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MailboxRoots not implemented")
}
func (UnimplementedQueryServer) LatestMailboxRoot(context.Context, *QueryLatestMailboxRoot) (*QueryMailboxRootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestMailboxRoot not implemented")
}
func (UnimplementedQueryServer) MailboxRoot(context.Context, *QueryMailboxRoot) (*QueryMailboxRootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MailboxRoot not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}
func (UnimplementedQueryServer) testEmbeddedByValue()               {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	// If the following call pancis, it indicates UnimplementedQueryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Config_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Config(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Config_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Config(ctx, req.(*QueryConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingEpoch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PendingEpoch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingEpoch(ctx, req.(*QueryPendingEpoch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FinalizedEpochs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFinalizedEpochs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FinalizedEpochs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_FinalizedEpochs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FinalizedEpochs(ctx, req.(*QueryFinalizedEpochs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestFinalizedEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestFinalizedEpoch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestFinalizedEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LatestFinalizedEpoch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestFinalizedEpoch(ctx, req.(*QueryLatestFinalizedEpoch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FinalizedEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFinalizedEpoch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FinalizedEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_FinalizedEpoch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FinalizedEpoch(ctx, req.(*QueryFinalizedEpoch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StateRoots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStateRoots)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StateRoots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_StateRoots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StateRoots(ctx, req.(*QueryStateRoots))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestStateRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestStateRoot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestStateRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LatestStateRoot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestStateRoot(ctx, req.(*QueryLatestStateRoot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StateRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStateRoot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StateRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_StateRoot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StateRoot(ctx, req.(*QueryStateRoot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MailboxRoots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMailboxRoots)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MailboxRoots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_MailboxRoots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MailboxRoots(ctx, req.(*QueryMailboxRoots))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestMailboxRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestMailboxRoot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestMailboxRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LatestMailboxRoot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestMailboxRoot(ctx, req.(*QueryLatestMailboxRoot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MailboxRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMailboxRoot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MailboxRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_MailboxRoot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MailboxRoot(ctx, req.(*QueryMailboxRoot))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nova.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Config",
			Handler:    _Query_Config_Handler,
		},
		{
			MethodName: "PendingEpoch",
			Handler:    _Query_PendingEpoch_Handler,
		},
		{
			MethodName: "FinalizedEpochs",
			Handler:    _Query_FinalizedEpochs_Handler,
		},
		{
			MethodName: "LatestFinalizedEpoch",
			Handler:    _Query_LatestFinalizedEpoch_Handler,
		},
		{
			MethodName: "FinalizedEpoch",
			Handler:    _Query_FinalizedEpoch_Handler,
		},
		{
			MethodName: "StateRoots",
			Handler:    _Query_StateRoots_Handler,
		},
		{
			MethodName: "LatestStateRoot",
			Handler:    _Query_LatestStateRoot_Handler,
		},
		{
			MethodName: "StateRoot",
			Handler:    _Query_StateRoot_Handler,
		},
		{
			MethodName: "MailboxRoots",
			Handler:    _Query_MailboxRoots_Handler,
		},
		{
			MethodName: "LatestMailboxRoot",
			Handler:    _Query_LatestMailboxRoot_Handler,
		},
		{
			MethodName: "MailboxRoot",
			Handler:    _Query_MailboxRoot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nova/v1/query.proto",
}
