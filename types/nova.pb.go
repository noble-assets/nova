// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nova/v1/nova.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Config struct {
	// epoch_length defines the length on an epoch, in Noble AppLayer blocks.
	EpochLength uint64 `protobuf:"varint,1,opt,name=epoch_length,json=epochLength,proto3" json:"epoch_length,omitempty"`
	// hook_address defines the contract address of the Hyperlane Merkle Tree
	// Hook deployed on the Noble Applayer, used by the canonical mailbox.
	HookAddress string `protobuf:"bytes,2,opt,name=hook_address,json=hookAddress,proto3" json:"hook_address,omitempty"`
	// enrolled_validators defines the validator addresses that are currently
	// enrolled to finalize epochs. If empty, the full validator set is assumed
	// to be enrolled.
	EnrolledValidators []string `protobuf:"bytes,3,rep,name=enrolled_validators,json=enrolledValidators,proto3" json:"enrolled_validators,omitempty"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_679f79746f905431, []int{0}
}
func (m *Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return m.Size()
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetEpochLength() uint64 {
	if m != nil {
		return m.EpochLength
	}
	return 0
}

func (m *Config) GetHookAddress() string {
	if m != nil {
		return m.HookAddress
	}
	return ""
}

func (m *Config) GetEnrolledValidators() []string {
	if m != nil {
		return m.EnrolledValidators
	}
	return nil
}

type Epoch struct {
	Number      uint64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	StartHeight uint64 `protobuf:"varint,2,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	EndHeight   uint64 `protobuf:"varint,3,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
}

func (m *Epoch) Reset()         { *m = Epoch{} }
func (m *Epoch) String() string { return proto.CompactTextString(m) }
func (*Epoch) ProtoMessage()    {}
func (*Epoch) Descriptor() ([]byte, []int) {
	return fileDescriptor_679f79746f905431, []int{1}
}
func (m *Epoch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Epoch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Epoch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Epoch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Epoch.Merge(m, src)
}
func (m *Epoch) XXX_Size() int {
	return m.Size()
}
func (m *Epoch) XXX_DiscardUnknown() {
	xxx_messageInfo_Epoch.DiscardUnknown(m)
}

var xxx_messageInfo_Epoch proto.InternalMessageInfo

func (m *Epoch) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Epoch) GetStartHeight() uint64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *Epoch) GetEndHeight() uint64 {
	if m != nil {
		return m.EndHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*Config)(nil), "nova.v1.Config")
	proto.RegisterType((*Epoch)(nil), "nova.v1.Epoch")
}

func init() { proto.RegisterFile("nova/v1/nova.proto", fileDescriptor_679f79746f905431) }

var fileDescriptor_679f79746f905431 = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x90, 0xb1, 0x4e, 0xf3, 0x30,
	0x14, 0x85, 0xeb, 0xbf, 0xfd, 0x83, 0xe2, 0x30, 0x19, 0x09, 0x65, 0xc1, 0x0a, 0x99, 0xb2, 0xd0,
	0xa8, 0x62, 0x65, 0x01, 0x84, 0xc4, 0xc0, 0x94, 0x81, 0x81, 0x25, 0x72, 0xea, 0x4b, 0x1c, 0x91,
	0xfa, 0x46, 0xb6, 0x1b, 0x89, 0x89, 0x57, 0xe0, 0xb1, 0x18, 0x3b, 0x32, 0xa2, 0xe4, 0x45, 0x50,
	0xdc, 0x96, 0xc9, 0xbe, 0xdf, 0x39, 0xd2, 0x27, 0x1d, 0xca, 0x34, 0xf6, 0x22, 0xef, 0x57, 0xf9,
	0xf4, 0x2e, 0x3b, 0x83, 0x0e, 0xd9, 0x89, 0xff, 0xf7, 0xab, 0xf4, 0x83, 0x06, 0xf7, 0xa8, 0x5f,
	0x9b, 0x9a, 0x5d, 0xd2, 0x53, 0xe8, 0x70, 0xad, 0xca, 0x16, 0x74, 0xed, 0x54, 0x4c, 0x12, 0x92,
	0x2d, 0x8a, 0xc8, 0xb3, 0x27, 0x8f, 0xa6, 0x8a, 0x42, 0x7c, 0x2b, 0x85, 0x94, 0x06, 0xac, 0x8d,
	0xff, 0x25, 0x24, 0x0b, 0x8b, 0x68, 0x62, 0xb7, 0x7b, 0xc4, 0x72, 0x7a, 0x06, 0xda, 0x60, 0xdb,
	0x82, 0x2c, 0x7b, 0xd1, 0x36, 0x52, 0x38, 0x34, 0x36, 0x9e, 0x27, 0xf3, 0x2c, 0x2c, 0xd8, 0x31,
	0x7a, 0xfe, 0x4b, 0x52, 0x41, 0xff, 0x3f, 0x4c, 0x0a, 0x76, 0x4e, 0x03, 0xbd, 0xdd, 0x54, 0x60,
	0x0e, 0xe6, 0xc3, 0x35, 0x49, 0xad, 0x13, 0xc6, 0x95, 0x0a, 0x9a, 0x5a, 0x39, 0x2f, 0x5d, 0x14,
	0x91, 0x67, 0x8f, 0x1e, 0xb1, 0x0b, 0x4a, 0x41, 0xcb, 0x63, 0x61, 0xee, 0x0b, 0x21, 0x68, 0xb9,
	0x8f, 0xef, 0x6e, 0xbe, 0x06, 0x4e, 0x76, 0x03, 0x27, 0x3f, 0x03, 0x27, 0x9f, 0x23, 0x9f, 0xed,
	0x46, 0x3e, 0xfb, 0x1e, 0xf9, 0xec, 0x25, 0xad, 0x1b, 0xa7, 0xb6, 0xd5, 0x72, 0x8d, 0x9b, 0x5c,
	0x63, 0xd5, 0xc2, 0x95, 0xb0, 0x16, 0x9c, 0xf5, 0x53, 0xe5, 0xee, 0xbd, 0x03, 0x5b, 0x05, 0x7e,
	0xb1, 0xeb, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x66, 0x3a, 0x2a, 0x09, 0x47, 0x01, 0x00, 0x00,
}

func (m *Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EnrolledValidators) > 0 {
		for iNdEx := len(m.EnrolledValidators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EnrolledValidators[iNdEx])
			copy(dAtA[i:], m.EnrolledValidators[iNdEx])
			i = encodeVarintNova(dAtA, i, uint64(len(m.EnrolledValidators[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.HookAddress) > 0 {
		i -= len(m.HookAddress)
		copy(dAtA[i:], m.HookAddress)
		i = encodeVarintNova(dAtA, i, uint64(len(m.HookAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.EpochLength != 0 {
		i = encodeVarintNova(dAtA, i, uint64(m.EpochLength))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Epoch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Epoch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Epoch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndHeight != 0 {
		i = encodeVarintNova(dAtA, i, uint64(m.EndHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.StartHeight != 0 {
		i = encodeVarintNova(dAtA, i, uint64(m.StartHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.Number != 0 {
		i = encodeVarintNova(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNova(dAtA []byte, offset int, v uint64) int {
	offset -= sovNova(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochLength != 0 {
		n += 1 + sovNova(uint64(m.EpochLength))
	}
	l = len(m.HookAddress)
	if l > 0 {
		n += 1 + l + sovNova(uint64(l))
	}
	if len(m.EnrolledValidators) > 0 {
		for _, s := range m.EnrolledValidators {
			l = len(s)
			n += 1 + l + sovNova(uint64(l))
		}
	}
	return n
}

func (m *Epoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Number != 0 {
		n += 1 + sovNova(uint64(m.Number))
	}
	if m.StartHeight != 0 {
		n += 1 + sovNova(uint64(m.StartHeight))
	}
	if m.EndHeight != 0 {
		n += 1 + sovNova(uint64(m.EndHeight))
	}
	return n
}

func sovNova(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNova(x uint64) (n int) {
	return sovNova(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNova
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochLength", wireType)
			}
			m.EpochLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNova
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochLength |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HookAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNova
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNova
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNova
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HookAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnrolledValidators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNova
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNova
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNova
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnrolledValidators = append(m.EnrolledValidators, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNova(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNova
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Epoch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNova
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Epoch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Epoch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNova
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			m.StartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNova
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndHeight", wireType)
			}
			m.EndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNova
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNova(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNova
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNova(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNova
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNova
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNova
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNova
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNova
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNova
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNova        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNova          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNova = fmt.Errorf("proto: unexpected end of group")
)
