// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nova/v1/events.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EpochFinalized is an event emitted whenever an epoch if finalized.
type EpochFinalized struct {
	// epoch_number defines the epoch number that was finalized.
	EpochNumber uint64 `protobuf:"varint,1,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	// state_root defines the hex-encoded state root of the finalized epoch.
	StateRoot string `protobuf:"bytes,2,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	// mailbox_root defines the hex-encoded mailbox root of the finalized epoch.
	MailboxRoot string `protobuf:"bytes,3,opt,name=mailbox_root,json=mailboxRoot,proto3" json:"mailbox_root,omitempty"`
}

func (m *EpochFinalized) Reset()         { *m = EpochFinalized{} }
func (m *EpochFinalized) String() string { return proto.CompactTextString(m) }
func (*EpochFinalized) ProtoMessage()    {}
func (*EpochFinalized) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce01ba55cf3d9d22, []int{0}
}
func (m *EpochFinalized) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochFinalized) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochFinalized.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochFinalized) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochFinalized.Merge(m, src)
}
func (m *EpochFinalized) XXX_Size() int {
	return m.Size()
}
func (m *EpochFinalized) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochFinalized.DiscardUnknown(m)
}

var xxx_messageInfo_EpochFinalized proto.InternalMessageInfo

func (m *EpochFinalized) GetEpochNumber() uint64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func (m *EpochFinalized) GetStateRoot() string {
	if m != nil {
		return m.StateRoot
	}
	return ""
}

func (m *EpochFinalized) GetMailboxRoot() string {
	if m != nil {
		return m.MailboxRoot
	}
	return ""
}

// EpochLengthSet is an event emitted whenever the module authority sets the epoch length.
type EpochLengthSet struct {
	// old_epoch_length defines the old epoch length before the update.
	OldEpochLength uint64 `protobuf:"varint,1,opt,name=old_epoch_length,json=oldEpochLength,proto3" json:"old_epoch_length,omitempty"`
	// new_epoch_length defines the new epoch length after the update.
	NewEpochLength uint64 `protobuf:"varint,2,opt,name=new_epoch_length,json=newEpochLength,proto3" json:"new_epoch_length,omitempty"`
}

func (m *EpochLengthSet) Reset()         { *m = EpochLengthSet{} }
func (m *EpochLengthSet) String() string { return proto.CompactTextString(m) }
func (*EpochLengthSet) ProtoMessage()    {}
func (*EpochLengthSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce01ba55cf3d9d22, []int{1}
}
func (m *EpochLengthSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochLengthSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochLengthSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochLengthSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochLengthSet.Merge(m, src)
}
func (m *EpochLengthSet) XXX_Size() int {
	return m.Size()
}
func (m *EpochLengthSet) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochLengthSet.DiscardUnknown(m)
}

var xxx_messageInfo_EpochLengthSet proto.InternalMessageInfo

func (m *EpochLengthSet) GetOldEpochLength() uint64 {
	if m != nil {
		return m.OldEpochLength
	}
	return 0
}

func (m *EpochLengthSet) GetNewEpochLength() uint64 {
	if m != nil {
		return m.NewEpochLength
	}
	return 0
}

// HookAddressSet is an event emitted whenever the module authority sets the hook address.
type HookAddressSet struct {
	// old_hook_address defines the old hex-encoded hook address before the update.
	OldHookAddress string `protobuf:"bytes,1,opt,name=old_hook_address,json=oldHookAddress,proto3" json:"old_hook_address,omitempty"`
	// new_hook_address defines the new hex-encoded hook address after the update.
	NewHookAddress string `protobuf:"bytes,2,opt,name=new_hook_address,json=newHookAddress,proto3" json:"new_hook_address,omitempty"`
}

func (m *HookAddressSet) Reset()         { *m = HookAddressSet{} }
func (m *HookAddressSet) String() string { return proto.CompactTextString(m) }
func (*HookAddressSet) ProtoMessage()    {}
func (*HookAddressSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce01ba55cf3d9d22, []int{2}
}
func (m *HookAddressSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HookAddressSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HookAddressSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HookAddressSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HookAddressSet.Merge(m, src)
}
func (m *HookAddressSet) XXX_Size() int {
	return m.Size()
}
func (m *HookAddressSet) XXX_DiscardUnknown() {
	xxx_messageInfo_HookAddressSet.DiscardUnknown(m)
}

var xxx_messageInfo_HookAddressSet proto.InternalMessageInfo

func (m *HookAddressSet) GetOldHookAddress() string {
	if m != nil {
		return m.OldHookAddress
	}
	return ""
}

func (m *HookAddressSet) GetNewHookAddress() string {
	if m != nil {
		return m.NewHookAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*EpochFinalized)(nil), "nova.v1.EpochFinalized")
	proto.RegisterType((*EpochLengthSet)(nil), "nova.v1.EpochLengthSet")
	proto.RegisterType((*HookAddressSet)(nil), "nova.v1.HookAddressSet")
}

func init() { proto.RegisterFile("nova/v1/events.proto", fileDescriptor_ce01ba55cf3d9d22) }

var fileDescriptor_ce01ba55cf3d9d22 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0x31, 0x4b, 0xc3, 0x40,
	0x14, 0xc7, 0x7b, 0x55, 0x94, 0x5e, 0xa5, 0x48, 0x70, 0xe8, 0xe2, 0x51, 0x3b, 0x65, 0x31, 0xa1,
	0xb8, 0xba, 0x28, 0x28, 0x0e, 0xe2, 0x10, 0x37, 0x97, 0x70, 0xe9, 0x3d, 0x9a, 0xd0, 0xcb, 0xbd,
	0x90, 0xbb, 0xa4, 0xea, 0xa7, 0xf0, 0x63, 0x39, 0x76, 0x74, 0x94, 0xe4, 0x8b, 0xc8, 0x5d, 0x22,
	0xa4, 0xeb, 0x8f, 0x1f, 0xef, 0xc7, 0xe3, 0x4f, 0x2f, 0x14, 0xd6, 0x3c, 0xac, 0x57, 0x21, 0xd4,
	0xa0, 0x8c, 0x0e, 0x8a, 0x12, 0x0d, 0x7a, 0xa7, 0x96, 0x06, 0xf5, 0x6a, 0x59, 0xd1, 0xd9, 0x43,
	0x81, 0xeb, 0xf4, 0x31, 0x53, 0x5c, 0x66, 0x9f, 0x20, 0xbc, 0x2b, 0x7a, 0x06, 0x96, 0xc4, 0xaa,
	0xca, 0x13, 0x28, 0xe7, 0x64, 0x41, 0xfc, 0xe3, 0x68, 0xea, 0xd8, 0x8b, 0x43, 0xde, 0x25, 0xa5,
	0xda, 0x70, 0x03, 0x71, 0x89, 0x68, 0xe6, 0xe3, 0x05, 0xf1, 0x27, 0xd1, 0xc4, 0x91, 0x08, 0xd1,
	0xd8, 0x0b, 0x39, 0xcf, 0x64, 0x82, 0xef, 0x9d, 0x70, 0xe4, 0x84, 0x69, 0xcf, 0xac, 0xb2, 0x14,
	0x7d, 0xf6, 0x19, 0xd4, 0xc6, 0xa4, 0xaf, 0x60, 0x3c, 0x9f, 0x9e, 0xa3, 0x14, 0x71, 0x97, 0x96,
	0x0e, 0xf7, 0xe9, 0x19, 0x4a, 0x31, 0x90, 0xad, 0xa9, 0x60, 0x77, 0x68, 0x8e, 0x3b, 0x53, 0xc1,
	0x6e, 0x60, 0xda, 0xca, 0x13, 0xe2, 0xf6, 0x4e, 0x88, 0x12, 0xb4, 0x1e, 0x54, 0x52, 0xc4, 0x6d,
	0xcc, 0x3b, 0xec, 0x2a, 0x13, 0x57, 0x19, 0xc8, 0xff, 0x95, 0x03, 0xb3, 0xfb, 0xd4, 0x56, 0x06,
	0xe6, 0xfd, 0xed, 0x77, 0xc3, 0xc8, 0xbe, 0x61, 0xe4, 0xb7, 0x61, 0xe4, 0xab, 0x65, 0xa3, 0x7d,
	0xcb, 0x46, 0x3f, 0x2d, 0x1b, 0xbd, 0x2d, 0x37, 0x99, 0x49, 0xab, 0x24, 0x58, 0x63, 0x1e, 0x2a,
	0x4c, 0x24, 0x5c, 0x73, 0xad, 0xc1, 0xe8, 0xd0, 0x6d, 0x62, 0x3e, 0x0a, 0xd0, 0xc9, 0x89, 0x1b,
	0xe4, 0xe6, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x85, 0xe8, 0x58, 0xb0, 0xa8, 0x01, 0x00, 0x00,
}

func (m *EpochFinalized) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochFinalized) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochFinalized) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MailboxRoot) > 0 {
		i -= len(m.MailboxRoot)
		copy(dAtA[i:], m.MailboxRoot)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MailboxRoot)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StateRoot) > 0 {
		i -= len(m.StateRoot)
		copy(dAtA[i:], m.StateRoot)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StateRoot)))
		i--
		dAtA[i] = 0x12
	}
	if m.EpochNumber != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EpochLengthSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochLengthSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochLengthSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewEpochLength != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.NewEpochLength))
		i--
		dAtA[i] = 0x10
	}
	if m.OldEpochLength != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.OldEpochLength))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HookAddressSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HookAddressSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HookAddressSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewHookAddress) > 0 {
		i -= len(m.NewHookAddress)
		copy(dAtA[i:], m.NewHookAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewHookAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OldHookAddress) > 0 {
		i -= len(m.OldHookAddress)
		copy(dAtA[i:], m.OldHookAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OldHookAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EpochFinalized) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochNumber != 0 {
		n += 1 + sovEvents(uint64(m.EpochNumber))
	}
	l = len(m.StateRoot)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.MailboxRoot)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EpochLengthSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OldEpochLength != 0 {
		n += 1 + sovEvents(uint64(m.OldEpochLength))
	}
	if m.NewEpochLength != 0 {
		n += 1 + sovEvents(uint64(m.NewEpochLength))
	}
	return n
}

func (m *HookAddressSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OldHookAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewHookAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EpochFinalized) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochFinalized: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochFinalized: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailboxRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MailboxRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochLengthSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochLengthSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochLengthSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldEpochLength", wireType)
			}
			m.OldEpochLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldEpochLength |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewEpochLength", wireType)
			}
			m.NewEpochLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewEpochLength |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HookAddressSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HookAddressSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HookAddressSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldHookAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldHookAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewHookAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewHookAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
