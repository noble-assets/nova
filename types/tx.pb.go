// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nova/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cometbft/cometbft/abci/types"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Injection struct {
	EpochNumber uint64                   `protobuf:"varint,1,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	EndHeight   uint64                   `protobuf:"varint,2,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
	StateRoot   string                   `protobuf:"bytes,3,opt,name=state_root,json=stateRoot,proto3" json:"state_root,omitempty"`
	MailboxRoot string                   `protobuf:"bytes,4,opt,name=mailbox_root,json=mailboxRoot,proto3" json:"mailbox_root,omitempty"`
	CommitInfo  types.ExtendedCommitInfo `protobuf:"bytes,5,opt,name=commit_info,json=commitInfo,proto3" json:"commit_info"`
}

func (m *Injection) Reset()         { *m = Injection{} }
func (m *Injection) String() string { return proto.CompactTextString(m) }
func (*Injection) ProtoMessage()    {}
func (*Injection) Descriptor() ([]byte, []int) {
	return fileDescriptor_aff4a0cca5ec74f6, []int{0}
}
func (m *Injection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Injection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Injection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Injection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Injection.Merge(m, src)
}
func (m *Injection) XXX_Size() int {
	return m.Size()
}
func (m *Injection) XXX_DiscardUnknown() {
	xxx_messageInfo_Injection.DiscardUnknown(m)
}

var xxx_messageInfo_Injection proto.InternalMessageInfo

func (m *Injection) GetEpochNumber() uint64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func (m *Injection) GetEndHeight() uint64 {
	if m != nil {
		return m.EndHeight
	}
	return 0
}

func (m *Injection) GetStateRoot() string {
	if m != nil {
		return m.StateRoot
	}
	return ""
}

func (m *Injection) GetMailboxRoot() string {
	if m != nil {
		return m.MailboxRoot
	}
	return ""
}

func (m *Injection) GetCommitInfo() types.ExtendedCommitInfo {
	if m != nil {
		return m.CommitInfo
	}
	return types.ExtendedCommitInfo{}
}

// MsgSetEpochLength allows the module authority to set the epoch length.
type MsgSetEpochLength struct {
	Signer      string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	EpochLength uint64 `protobuf:"varint,2,opt,name=epoch_length,json=epochLength,proto3" json:"epoch_length,omitempty"`
}

func (m *MsgSetEpochLength) Reset()         { *m = MsgSetEpochLength{} }
func (m *MsgSetEpochLength) String() string { return proto.CompactTextString(m) }
func (*MsgSetEpochLength) ProtoMessage()    {}
func (*MsgSetEpochLength) Descriptor() ([]byte, []int) {
	return fileDescriptor_aff4a0cca5ec74f6, []int{1}
}
func (m *MsgSetEpochLength) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetEpochLength) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetEpochLength.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetEpochLength) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetEpochLength.Merge(m, src)
}
func (m *MsgSetEpochLength) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetEpochLength) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetEpochLength.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetEpochLength proto.InternalMessageInfo

// MsgSetEpochLengthResponse is the response of the SetEpochLength message.
type MsgSetEpochLengthResponse struct {
}

func (m *MsgSetEpochLengthResponse) Reset()         { *m = MsgSetEpochLengthResponse{} }
func (m *MsgSetEpochLengthResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetEpochLengthResponse) ProtoMessage()    {}
func (*MsgSetEpochLengthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aff4a0cca5ec74f6, []int{2}
}
func (m *MsgSetEpochLengthResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetEpochLengthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetEpochLengthResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetEpochLengthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetEpochLengthResponse.Merge(m, src)
}
func (m *MsgSetEpochLengthResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetEpochLengthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetEpochLengthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetEpochLengthResponse proto.InternalMessageInfo

// MsgSetHookAddress allows the module authority to set the hook address.
type MsgSetHookAddress struct {
	Signer      string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	HookAddress string `protobuf:"bytes,2,opt,name=hook_address,json=hookAddress,proto3" json:"hook_address,omitempty"`
}

func (m *MsgSetHookAddress) Reset()         { *m = MsgSetHookAddress{} }
func (m *MsgSetHookAddress) String() string { return proto.CompactTextString(m) }
func (*MsgSetHookAddress) ProtoMessage()    {}
func (*MsgSetHookAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_aff4a0cca5ec74f6, []int{3}
}
func (m *MsgSetHookAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetHookAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetHookAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetHookAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetHookAddress.Merge(m, src)
}
func (m *MsgSetHookAddress) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetHookAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetHookAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetHookAddress proto.InternalMessageInfo

// MsgSetHookAddressResponse is the response of the SetHookAddress message.
type MsgSetHookAddressResponse struct {
}

func (m *MsgSetHookAddressResponse) Reset()         { *m = MsgSetHookAddressResponse{} }
func (m *MsgSetHookAddressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetHookAddressResponse) ProtoMessage()    {}
func (*MsgSetHookAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aff4a0cca5ec74f6, []int{4}
}
func (m *MsgSetHookAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetHookAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetHookAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetHookAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetHookAddressResponse.Merge(m, src)
}
func (m *MsgSetHookAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetHookAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetHookAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetHookAddressResponse proto.InternalMessageInfo

// MsgSetEnrolledValidators allows the module authority to set the enrolled validators.
type MsgSetEnrolledValidators struct {
	Signer             string   `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	EnrolledValidators []string `protobuf:"bytes,2,rep,name=enrolled_validators,json=enrolledValidators,proto3" json:"enrolled_validators,omitempty"`
}

func (m *MsgSetEnrolledValidators) Reset()         { *m = MsgSetEnrolledValidators{} }
func (m *MsgSetEnrolledValidators) String() string { return proto.CompactTextString(m) }
func (*MsgSetEnrolledValidators) ProtoMessage()    {}
func (*MsgSetEnrolledValidators) Descriptor() ([]byte, []int) {
	return fileDescriptor_aff4a0cca5ec74f6, []int{5}
}
func (m *MsgSetEnrolledValidators) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetEnrolledValidators) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetEnrolledValidators.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetEnrolledValidators) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetEnrolledValidators.Merge(m, src)
}
func (m *MsgSetEnrolledValidators) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetEnrolledValidators) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetEnrolledValidators.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetEnrolledValidators proto.InternalMessageInfo

// MsgSetEnrolledValidatorsResponse is the response of the SetEnrolledValidators message.
type MsgSetEnrolledValidatorsResponse struct {
}

func (m *MsgSetEnrolledValidatorsResponse) Reset()         { *m = MsgSetEnrolledValidatorsResponse{} }
func (m *MsgSetEnrolledValidatorsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetEnrolledValidatorsResponse) ProtoMessage()    {}
func (*MsgSetEnrolledValidatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aff4a0cca5ec74f6, []int{6}
}
func (m *MsgSetEnrolledValidatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetEnrolledValidatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetEnrolledValidatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetEnrolledValidatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetEnrolledValidatorsResponse.Merge(m, src)
}
func (m *MsgSetEnrolledValidatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetEnrolledValidatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetEnrolledValidatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetEnrolledValidatorsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Injection)(nil), "nova.v1.Injection")
	proto.RegisterType((*MsgSetEpochLength)(nil), "nova.v1.MsgSetEpochLength")
	proto.RegisterType((*MsgSetEpochLengthResponse)(nil), "nova.v1.MsgSetEpochLengthResponse")
	proto.RegisterType((*MsgSetHookAddress)(nil), "nova.v1.MsgSetHookAddress")
	proto.RegisterType((*MsgSetHookAddressResponse)(nil), "nova.v1.MsgSetHookAddressResponse")
	proto.RegisterType((*MsgSetEnrolledValidators)(nil), "nova.v1.MsgSetEnrolledValidators")
	proto.RegisterType((*MsgSetEnrolledValidatorsResponse)(nil), "nova.v1.MsgSetEnrolledValidatorsResponse")
}

func init() { proto.RegisterFile("nova/v1/tx.proto", fileDescriptor_aff4a0cca5ec74f6) }

var fileDescriptor_aff4a0cca5ec74f6 = []byte{
	// 615 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcf, 0x4f, 0xd4, 0x40,
	0x18, 0x6d, 0xf9, 0x65, 0x3a, 0x6b, 0x8c, 0x14, 0x8c, 0xa5, 0x84, 0xb2, 0xd4, 0xcb, 0x8a, 0xa1,
	0x15, 0xbc, 0x11, 0x2f, 0xae, 0x21, 0x01, 0x23, 0xc6, 0x94, 0xc4, 0x83, 0x97, 0xa6, 0x3f, 0x86,
	0x76, 0xa4, 0x9d, 0x6f, 0xd3, 0x19, 0x36, 0x78, 0x33, 0x9e, 0x8c, 0x27, 0x2f, 0xc6, 0x2b, 0x7f,
	0x02, 0x07, 0xfe, 0x08, 0x8e, 0x84, 0x78, 0x30, 0x31, 0x31, 0x06, 0x0e, 0xf8, 0x67, 0x98, 0x4e,
	0x87, 0xdd, 0x85, 0xb2, 0x21, 0xe1, 0xb2, 0xd9, 0x79, 0xdf, 0xfb, 0xde, 0xbc, 0x37, 0xdf, 0x74,
	0xd0, 0x7d, 0x0a, 0xdd, 0xc0, 0xed, 0x2e, 0xbb, 0x7c, 0xcf, 0xe9, 0x14, 0xc0, 0x41, 0xbf, 0x53,
	0x22, 0x4e, 0x77, 0xd9, 0x9c, 0x0c, 0x72, 0x42, 0xc1, 0x15, 0xbf, 0x55, 0xcd, 0x7c, 0x18, 0x01,
	0xcb, 0x81, 0xb9, 0x39, 0x4b, 0xca, 0x9e, 0x9c, 0x25, 0xb2, 0x30, 0x53, 0x15, 0x7c, 0xb1, 0x72,
	0xab, 0x85, 0x2c, 0x4d, 0x27, 0x90, 0x40, 0x85, 0x97, 0xff, 0x24, 0x3a, 0xcb, 0x31, 0x8d, 0x71,
	0x91, 0x13, 0xca, 0xdd, 0x20, 0x8c, 0x88, 0xcb, 0x3f, 0x76, 0xb0, 0x6c, 0xb1, 0x7f, 0xab, 0x48,
	0xdb, 0xa0, 0x1f, 0x70, 0xc4, 0x09, 0x50, 0x7d, 0x01, 0xdd, 0xc5, 0x1d, 0x88, 0x52, 0x9f, 0xee,
	0xe6, 0x21, 0x2e, 0x0c, 0xb5, 0xa9, 0xb6, 0xc6, 0xbc, 0x86, 0xc0, 0xde, 0x08, 0x48, 0x9f, 0x43,
	0x08, 0xd3, 0xd8, 0x4f, 0x31, 0x49, 0x52, 0x6e, 0x8c, 0x08, 0x82, 0x86, 0x69, 0xbc, 0x2e, 0x80,
	0xb2, 0xcc, 0x78, 0xc0, 0xb1, 0x5f, 0x00, 0x70, 0x63, 0xb4, 0xa9, 0xb6, 0x34, 0x4f, 0x13, 0x88,
	0x07, 0xc0, 0xcb, 0x0d, 0xf2, 0x80, 0x64, 0x21, 0xec, 0x55, 0x84, 0x31, 0x41, 0x68, 0x48, 0x4c,
	0x50, 0x5e, 0xa1, 0x46, 0x04, 0x79, 0x4e, 0xb8, 0x4f, 0xe8, 0x36, 0x18, 0xe3, 0x4d, 0xb5, 0xd5,
	0x58, 0x79, 0xe4, 0xf4, 0x43, 0x38, 0x65, 0x08, 0x67, 0x6d, 0x4f, 0x20, 0xf1, 0x4b, 0xc1, 0xdd,
	0xa0, 0xdb, 0xd0, 0x1e, 0x3b, 0xfa, 0x33, 0xaf, 0x78, 0x28, 0xea, 0x21, 0xf6, 0x77, 0x15, 0x4d,
	0x6e, 0xb2, 0x64, 0x0b, 0xf3, 0xb5, 0x32, 0xc2, 0x6b, 0x4c, 0x13, 0x9e, 0xea, 0x4f, 0xd1, 0x04,
	0x23, 0x09, 0x95, 0xf9, 0xb4, 0xb6, 0x71, 0x72, 0xb8, 0x34, 0x2d, 0x0f, 0xf2, 0x45, 0x1c, 0x17,
	0x98, 0xb1, 0x2d, 0x5e, 0x10, 0x9a, 0x78, 0x92, 0xd7, 0x3f, 0x97, 0x4c, 0x28, 0xc8, 0xd8, 0xd5,
	0xb9, 0x54, 0xa2, 0xab, 0x4f, 0xbe, 0xec, 0xcf, 0x2b, 0xff, 0xf6, 0xe7, 0x95, 0xcf, 0xe7, 0x07,
	0x8b, 0xb2, 0xef, 0xeb, 0xf9, 0xc1, 0xe2, 0x94, 0x98, 0xfa, 0x65, 0x07, 0xf6, 0x2c, 0x9a, 0xa9,
	0xd9, 0xf2, 0x30, 0xeb, 0x00, 0x65, 0x78, 0xc0, 0xf4, 0x3a, 0xc0, 0x8e, 0x34, 0x74, 0x3b, 0xd3,
	0x29, 0xc0, 0x8e, 0x1f, 0x54, 0x55, 0x61, 0x5a, 0xf3, 0x1a, 0x69, 0x5f, 0xf4, 0x66, 0xd3, 0x03,
	0x0e, 0xfa, 0xa6, 0x07, 0xc0, 0x9e, 0xe9, 0x9f, 0x2a, 0x32, 0x64, 0x24, 0x5a, 0x40, 0x96, 0xe1,
	0xf8, 0x5d, 0x90, 0x91, 0x38, 0xe0, 0x50, 0xdc, 0xc6, 0xbb, 0x87, 0xa6, 0xb0, 0xd4, 0xf1, 0xbb,
	0x3d, 0x21, 0x63, 0xa4, 0x39, 0xda, 0xd2, 0xda, 0x0b, 0x27, 0x87, 0x4b, 0x73, 0xb2, 0xbd, 0xb7,
	0xcb, 0x65, 0x1d, 0x1d, 0xd7, 0x5c, 0xac, 0xae, 0x0c, 0x09, 0x6b, 0xf6, 0x26, 0x54, 0xeb, 0xb1,
	0x6d, 0xd4, 0x1c, 0x96, 0xea, 0x22, 0xfa, 0xca, 0x8f, 0x11, 0x34, 0xba, 0xc9, 0x12, 0xfd, 0x2d,
	0xba, 0x77, 0xe5, 0xa2, 0x99, 0x8e, 0xfc, 0xc0, 0x9d, 0xda, 0xb4, 0x4d, 0x7b, 0x78, 0xed, 0x42,
	0x59, 0x2a, 0x0e, 0xde, 0x82, 0xab, 0x8a, 0x03, 0xb5, 0x9a, 0xe2, 0x35, 0x63, 0xd2, 0x31, 0x7a,
	0x70, 0xfd, 0x88, 0x16, 0xae, 0xda, 0xa9, 0x51, 0xcc, 0xc7, 0x37, 0x52, 0x2e, 0xb6, 0x31, 0xc7,
	0x3f, 0x9d, 0x1f, 0x2c, 0xaa, 0xed, 0xe7, 0x47, 0xa7, 0x96, 0x7a, 0x7c, 0x6a, 0xa9, 0x7f, 0x4f,
	0x2d, 0xf5, 0xdb, 0x99, 0xa5, 0x1c, 0x9f, 0x59, 0xca, 0xaf, 0x33, 0x4b, 0x79, 0x6f, 0x27, 0x84,
	0xa7, 0xbb, 0xa1, 0x13, 0x41, 0xee, 0x52, 0x08, 0x33, 0xbc, 0x14, 0x30, 0x86, 0x39, 0x73, 0xc5,
	0x2c, 0xc4, 0x03, 0x15, 0x4e, 0x88, 0x17, 0xea, 0xd9, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x04,
	0x42, 0x99, 0x02, 0x38, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	SetEpochLength(ctx context.Context, in *MsgSetEpochLength, opts ...grpc.CallOption) (*MsgSetEpochLengthResponse, error)
	SetHookAddress(ctx context.Context, in *MsgSetHookAddress, opts ...grpc.CallOption) (*MsgSetHookAddressResponse, error)
	SetEnrolledValidators(ctx context.Context, in *MsgSetEnrolledValidators, opts ...grpc.CallOption) (*MsgSetEnrolledValidatorsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SetEpochLength(ctx context.Context, in *MsgSetEpochLength, opts ...grpc.CallOption) (*MsgSetEpochLengthResponse, error) {
	out := new(MsgSetEpochLengthResponse)
	err := c.cc.Invoke(ctx, "/nova.v1.Msg/SetEpochLength", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetHookAddress(ctx context.Context, in *MsgSetHookAddress, opts ...grpc.CallOption) (*MsgSetHookAddressResponse, error) {
	out := new(MsgSetHookAddressResponse)
	err := c.cc.Invoke(ctx, "/nova.v1.Msg/SetHookAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetEnrolledValidators(ctx context.Context, in *MsgSetEnrolledValidators, opts ...grpc.CallOption) (*MsgSetEnrolledValidatorsResponse, error) {
	out := new(MsgSetEnrolledValidatorsResponse)
	err := c.cc.Invoke(ctx, "/nova.v1.Msg/SetEnrolledValidators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	SetEpochLength(context.Context, *MsgSetEpochLength) (*MsgSetEpochLengthResponse, error)
	SetHookAddress(context.Context, *MsgSetHookAddress) (*MsgSetHookAddressResponse, error)
	SetEnrolledValidators(context.Context, *MsgSetEnrolledValidators) (*MsgSetEnrolledValidatorsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SetEpochLength(ctx context.Context, req *MsgSetEpochLength) (*MsgSetEpochLengthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEpochLength not implemented")
}
func (*UnimplementedMsgServer) SetHookAddress(ctx context.Context, req *MsgSetHookAddress) (*MsgSetHookAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHookAddress not implemented")
}
func (*UnimplementedMsgServer) SetEnrolledValidators(ctx context.Context, req *MsgSetEnrolledValidators) (*MsgSetEnrolledValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEnrolledValidators not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SetEpochLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetEpochLength)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetEpochLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nova.v1.Msg/SetEpochLength",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetEpochLength(ctx, req.(*MsgSetEpochLength))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetHookAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetHookAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetHookAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nova.v1.Msg/SetHookAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetHookAddress(ctx, req.(*MsgSetHookAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetEnrolledValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetEnrolledValidators)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetEnrolledValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nova.v1.Msg/SetEnrolledValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetEnrolledValidators(ctx, req.(*MsgSetEnrolledValidators))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nova.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetEpochLength",
			Handler:    _Msg_SetEpochLength_Handler,
		},
		{
			MethodName: "SetHookAddress",
			Handler:    _Msg_SetHookAddress_Handler,
		},
		{
			MethodName: "SetEnrolledValidators",
			Handler:    _Msg_SetEnrolledValidators_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nova/v1/tx.proto",
}

func (m *Injection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Injection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Injection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CommitInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.MailboxRoot) > 0 {
		i -= len(m.MailboxRoot)
		copy(dAtA[i:], m.MailboxRoot)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MailboxRoot)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StateRoot) > 0 {
		i -= len(m.StateRoot)
		copy(dAtA[i:], m.StateRoot)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StateRoot)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EndHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EndHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.EpochNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetEpochLength) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetEpochLength) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetEpochLength) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochLength != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EpochLength))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetEpochLengthResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetEpochLengthResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetEpochLengthResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetHookAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetHookAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetHookAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HookAddress) > 0 {
		i -= len(m.HookAddress)
		copy(dAtA[i:], m.HookAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.HookAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetHookAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetHookAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetHookAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetEnrolledValidators) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetEnrolledValidators) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetEnrolledValidators) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EnrolledValidators) > 0 {
		for iNdEx := len(m.EnrolledValidators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EnrolledValidators[iNdEx])
			copy(dAtA[i:], m.EnrolledValidators[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.EnrolledValidators[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetEnrolledValidatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetEnrolledValidatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetEnrolledValidatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Injection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochNumber != 0 {
		n += 1 + sovTx(uint64(m.EpochNumber))
	}
	if m.EndHeight != 0 {
		n += 1 + sovTx(uint64(m.EndHeight))
	}
	l = len(m.StateRoot)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MailboxRoot)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.CommitInfo.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSetEpochLength) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.EpochLength != 0 {
		n += 1 + sovTx(uint64(m.EpochLength))
	}
	return n
}

func (m *MsgSetEpochLengthResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetHookAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.HookAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetHookAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetEnrolledValidators) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.EnrolledValidators) > 0 {
		for _, s := range m.EnrolledValidators {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSetEnrolledValidatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Injection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Injection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Injection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndHeight", wireType)
			}
			m.EndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailboxRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MailboxRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommitInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetEpochLength) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetEpochLength: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetEpochLength: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochLength", wireType)
			}
			m.EpochLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochLength |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetEpochLengthResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetEpochLengthResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetEpochLengthResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetHookAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetHookAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetHookAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HookAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HookAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetHookAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetHookAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetHookAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetEnrolledValidators) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetEnrolledValidators: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetEnrolledValidators: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnrolledValidators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnrolledValidators = append(m.EnrolledValidators, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetEnrolledValidatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetEnrolledValidatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetEnrolledValidatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
